plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.ybcharLog'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

ext {
    set('springCloudVersion', "2021.0.0")
    snippetsDir = file('build/generated-snippets')
    queryDslVersion = "5.0.0"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

ext {
    asciidocVersion = "2.0.6.RELEASE"
    snippetsDir = file('build/generated-snippets')
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

//    implementation 'org.springframework.security:spring-security-crypto'

    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'

//    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
//    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
//    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-jpa"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jpa"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

//tasks.named('test') {
//    useJUnitPlatform()
//}
//test {
//    useJUnitPlatform()
//}

//def querydslDir = "$buildDir/generated/querydsl"
//querydsl {
//    jpa = true
//    querydslSourcesDir = querydslDir
//}
//sourceSets {
//    main.java.srcDir querydslDir
//}
//compileQuerydsl {
//    options.annotationProcessorPath = configurations.querydsl
//}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

asciidoctor.doFirst {
    delete file("src/main/resources/static/docs")
}

bootJar {
    enabled = true

    dependsOn asciidoctor

    copy {
        from asciidoctor.outputDir
        into "src/main/resources/static/docs"
    }
}

jar {
    enabled = false
}