plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'ybcharLog'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
    asciidoctorExt
}

repositories {
    mavenCentral()
}

ext {
    asciidocVersion = "2.0.6.RELEASE"
    snippetsDir = file('build/generated-snippets')
    queryDslVersion = "5.0.0"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.4.1'

    // aws sdk
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    implementation group: 'org.javassist', name: 'javassist', version: '3.29.0-GA'

    implementation 'org.json:json:20220320'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly('io.jsonwebtoken:jjwt-orgjson:0.11.5') {
        exclude group: 'org.json', module: 'json' //provided by Android natively
    }

    implementation 'org.springframework.security:spring-security-crypto'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'

    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
    implementation 'org.projectlombok:lombok'
    annotationProcessor('org.projectlombok:lombok')

    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor:${asciidocVersion}"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:${asciidocVersion}"

    // query dsl
    def queryDSL = '5.0.0'
//    compile("com.querydsl:querydsl-jpa:${queryDSL}")
//    compile("com.querydsl:querydsl-apt:${queryDSL}:jpa")
    annotationProcessor("com.querydsl:querydsl-apt:${queryDSL}:jpa")
    annotationProcessor("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final")
    annotationProcessor("javax.annotation:javax.annotation-api:1.3.2")

    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}


test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    forkOptions {
        jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED', '--add-opens', 'java.base/java.io=ALL-UNNAMED')
    }
    dependsOn test
}

bootJar {
    enabled = true

    dependsOn asciidoctor

    copy {
        from asciidoctor.outputDir
        into "src/main/resources/static/docs"
    }
}
jar {
    baseName = "ybcharLog"
    enabled = false
}
//ForkOptions {
//    jvmArgs(
//            "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED",
//            "--add-opens", "java.base/java.io=ALL-UNNAMED"
//    )
//}

clean {
    delete file("$buildDir/generated/*")
    delete file("src/main/generated")
}

def querydslDir = "$buildDir/generated/sources/annotationProcessor/java/main"
def generated = "src/main/generated"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

tasks.withType(AbstractCompile) {
    options.with {
        fork = true
    }
}

//gradle clean 시, Q Class 디렉토리까지 삭제하도록 설정





